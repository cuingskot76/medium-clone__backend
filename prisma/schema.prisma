// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  profile   Profile?
  posts     Post[]
  comments  Comment[]
  likes     PostLike[]
  followers Follow[]   @relation("Follower")
  following Follow[]   @relation("Following")

  CommentReply CommentReply[]
  CommentLike  CommentLike[]
}

model Profile {
  id       Int     @id @default(autoincrement())
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  bio      String?
  avatar   String?
  isMember Boolean @default(false)
  about    String?
  banner   String?
}

model Post {
  id         String     @id @default(cuid())
  title      String
  subTitle   String?
  content    String     @db.LongText
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  published  Boolean    @default(false)
  categories Category[]
  views      Int?       @default(0)
  comments   Comment[]
  likes      PostLike[]
  isPremium  Boolean    @default(false)
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Comment {
  id          Int            @id @default(autoincrement())
  content     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  author      User           @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post?          @relation(fields: [postId], references: [id])
  postId      String
  replies     CommentReply[]
  CommentLike CommentLike[]
}

model CommentReply {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId Int
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
}
